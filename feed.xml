<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://bartleyn.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://bartleyn.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-10T21:22:04+00:00</updated><id>https://bartleyn.github.io/feed.xml</id><title type="html">blank</title><subtitle>Academic &amp; Professional Website for Nathan Bartley </subtitle><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://bartleyn.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://bartleyn.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://bartleyn.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We‚Äôre introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we‚Äôre introducing Gemini 1.5 Flash: a model that‚Äôs lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We‚Äôre also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5‚Äôs 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It‚Äôs optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it‚Äôs a lighter weight model than 1.5 Pro, it‚Äôs highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it‚Äôs been trained by 1.5 Pro through a process called ‚Äúdistillation,‚Äù where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash‚Äôs availability and pricing.Over the last few months, we‚Äôve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we‚Äôve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We‚Äôve improved control over the model‚Äôs responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we‚Äôve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we‚Äôre now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do ‚Äî not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we‚Äôre also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We‚Äôre announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we‚Äôve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind‚Äôs mission to build AI responsibly to benefit humanity, we‚Äôve always wanted to develop universal AI agents that can be helpful in everyday life. That‚Äôs why today, we‚Äôre sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do ‚Äî and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we‚Äôve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we‚Äôve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we‚Äôve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they‚Äôre being used in, and respond quickly, in conversation.With technology like this, it‚Äôs easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We‚Äôve made incredible progress so far with our family of Gemini models, and we‚Äôre always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we‚Äôre able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google‚Äôs privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let‚Äôs stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We‚Äôre sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://bartleyn.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://bartleyn.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://bartleyn.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio¬†Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website!¬†üéâüéâ</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as¬†sources.</p> <p>Any questions or suggestions? üëâ Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on¬†GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Recovering MySQL data from .MYI, .MYD, .FRM files</title><link href="https://bartleyn.github.io/blog/2021/recovering-mysql-data-from-myd-myi-frm/" rel="alternate" type="text/html" title="Recovering MySQL data from .MYI, .MYD, .FRM files"/><published>2021-10-25T21:01:00+00:00</published><updated>2021-10-25T21:01:00+00:00</updated><id>https://bartleyn.github.io/blog/2021/recovering-mysql-data-from-myd-myi-frm</id><content type="html" xml:base="https://bartleyn.github.io/blog/2021/recovering-mysql-data-from-myd-myi-frm/"><![CDATA[<h2 id="recovering-mysql-data-from-myi-myd-frm-files">Recovering MySQL data from .MYI, .MYD, .FRM files</h2> <p>###Summary</p> <ul> <li>Identifying the hexdump of the version number of the .frm file</li> <li>Installing that version of MySQL https://downloads.mysql.com/archives/community/</li> <li>Starting it up</li> <li>Resetting the password</li> <li>Creating a new database</li> <li>Moving the data to that database folder</li> <li>using mysqldump to dump the data to a CSV format</li> </ul> <h2 id="what-version-of-mysql-to-install">What version of MySQL to install?</h2> <p>Drawing inspiration from the <a href="https://www.percona.com/blog/2015/07/09/obtain-mysql-version-frm-file/">percona blog</a>, as long as the version is old enough, you can make use of the <code class="language-plaintext highlighter-rouge">hexdump</code> command to identify what version of MySQL to install.</p> <p>Execute the following hexdump call to look at the first two bytes of the <code class="language-plaintext highlighter-rouge">.frm</code> file (the version number is stored at a 0x33 offset): <code class="language-plaintext highlighter-rouge">hexdump -s 0x33 -n 2 -v -d /var/lib/mysql/tweetdata/tweets.frm</code></p> <p>For our data we got the following result:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0000033   50704                                               
0000035
</code></pre></div></div> <p>Which suggests that we should install version 5.7.4 as that must have been the last version that the table was built / altered on.</p> <p>###Downloading MySQL If you need to download an older version of MySQL you can navigate to <a href="https://downloads.mysql.com/archives/community/">this archive page</a>:</p> <div class="row mt-1"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mysql_archive-480.webp 480w,/assets/img/mysql_archive-800.webp 800w,/assets/img/mysql_archive-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/mysql_archive.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <caption class="caption"> MySQL Archive page </caption> <p>We downloaded the .tar ball for the RPM bundle (345 M at the top).</p> <p>###Installing</p> <p>After downloading the tar ball we extract and run <code class="language-plaintext highlighter-rouge">sudo yum localinstall MySQL-shared-5.7.4_m14-1.linux_glibc2.5.x86_64.rpm</code></p> <p>on each of the <code class="language-plaintext highlighter-rouge">.rpm</code> files you need (for us this was the server, client, and shared).</p> <p><a href="https://web.archive.org/web/20170810042727/https://dev.mysql.com/doc/refman/5.5/en/mysql-install-db.html">Archive link</a></p> <p>Since we are using version 5.7.4 we can call mysql_install_db to do some heavy lifting in setup:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql_install_db --user=mysql \
         --basedir=/opt/mysql/mysql \
         --datadir=/opt/mysql/mysql/data
</code></pre></div></div> <p>Now you can copy your .FRM, .MYD, .MYI files into your data directory!</p> <h3 id="starting-up">Starting up</h3> <p>If your installation includes <code class="language-plaintext highlighter-rouge">mysqld_safe</code> run:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysqld_safe --user=mysql &amp;
</code></pre></div></div> <p>You may also be able to run: <code class="language-plaintext highlighter-rouge">systemctl start mysqld</code></p> <p>Access the server with the client: <code class="language-plaintext highlighter-rouge">mysql -u root -p</code></p> <p>You will have to reset your password, and if it doesn‚Äôt prompt you already you can try:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SET PASSWORD FOR 'root'@'localhost' = PASSWORD('New_Password');
</code></pre></div></div> <p>You can then create a new database which will create a database folder in the data directory we passed to <code class="language-plaintext highlighter-rouge">mysql_install_db</code>. After copying the .FRM, .MYD, .MYI files into that directory you should be able to see a table within that directory!</p> <h3 id="dumping-the-data-to-csv">Dumping the data to CSV</h3> <p>Finally, once the table is available, you can call mysqldump to dump the data to csv:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysqldump -u [username] -p -t -T/path/to/directory [database] [tableName] --fields-terminated-by=,
</code></pre></div></div> <p>By default it may not give you column names, which wasn‚Äôt really a problem for us, but if you need column names, there are <a href="https://stackoverflow.com/questions/262924/how-to-export-dump-a-mysql-table-into-a-text-file-including-the-field-names-a">alternate ways</a> to dump the data that may work for you.</p> <p>Hope that helps! </p>]]></content><author><name></name></author><category term="debugging"/><category term="MySQL"/><category term="Hexdump"/><summary type="html"><![CDATA[Saving you some trouble getting data out of your files]]></summary></entry><entry><title type="html">Getting VSCode C++ to work on MacOS</title><link href="https://bartleyn.github.io/blog/2021/getting-vscode-cpp-working-on-macos/" rel="alternate" type="text/html" title="Getting VSCode C++ to work on MacOS"/><published>2021-10-19T21:01:00+00:00</published><updated>2021-10-19T21:01:00+00:00</updated><id>https://bartleyn.github.io/blog/2021/getting-vscode-cpp-working-on-macos</id><content type="html" xml:base="https://bartleyn.github.io/blog/2021/getting-vscode-cpp-working-on-macos/"><![CDATA[<h2 id="connecting-clangc-compiler-to-vscode-macos">Connecting Clang/C++ compiler to VSCode (macOS)</h2> <p>This is a short post meant to step through the steps needed to get Visual Studio code (macOS) to use your clang c++ compiler to build your cpp code.</p> <h3 id="making-sure-you-have-support-for-c">Making sure you have support for c++</h3> <p>You may encounter that you don‚Äôt have any formatting colors or other options for any c++ code you write, so as a first step we suggest you install the C++ extension.</p> <div class="row mt-1"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/vscode_1a_cpp-480.webp 480w,/assets/img/vscode_1a_cpp-800.webp 800w,/assets/img/vscode_1a_cpp-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/vscode_1a_cpp.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <caption class="caption"> Installing the C++ extension </caption> <p>You may also need to install clang if you haven‚Äôt already. You can do this by running <code class="language-plaintext highlighter-rouge">xcode-select --install</code> in your terminal.</p> <h3 id="writing-up-sample-cpp">Writing up sample .cpp</h3> <div class="row mt-1"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/vscode_1_samepl_code-480.webp 480w,/assets/img/vscode_1_samepl_code-800.webp 800w,/assets/img/vscode_1_samepl_code-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/vscode_1_samepl_code.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <caption class="caption"> Sample .cpp file open in editor </caption> <p>After with a fresh sample .cpp file in an open editor. If you want to copy and paste:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"lorem"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ipsum"</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"do re mi "</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"fa"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="n">x</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="building-the-cpp">Building the .cpp</h3> <p>Next we need to give VSCode some instructions for how to actually ‚Äúbuild‚Äù our code. We do this by specifying commands and instructions through a <code class="language-plaintext highlighter-rouge">tasks.json</code> file. When you go to Terminal -&gt; Run Build Task you will be presented with a search bar and a result saying there is no build task. We will configure this to add a build command.</p> <div class="row mt-1"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/vscode_2_build_task-480.webp 480w,/assets/img/vscode_2_build_task-800.webp 800w,/assets/img/vscode_2_build_task-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/vscode_2_build_task.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This will open a tasks.json file that is empty. Here is my tasks.json file contents:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†//¬†See¬†https://go.microsoft.com/fwlink/?LinkId=</span><span class="mi">733558</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†//¬†for¬†the¬†documentation¬†about¬†the¬†tasks.json¬†format</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†</span><span class="nl">"version"</span><span class="p">:</span><span class="err">¬†</span><span class="s2">"2.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†</span><span class="nl">"tasks"</span><span class="p">:</span><span class="err">¬†</span><span class="p">[</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†</span><span class="p">{</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"type"</span><span class="p">:</span><span class="err">¬†</span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"label"</span><span class="p">:</span><span class="err">¬†</span><span class="s2">"clang++¬†build¬†active¬†file"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"command"</span><span class="p">:</span><span class="err">¬†</span><span class="s2">"/usr/bin/clang++"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"args"</span><span class="p">:</span><span class="err">¬†</span><span class="p">[</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="s2">"-std=c++17"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="s2">"-stdlib=libc++"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†//</span><span class="s2">"-v"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="s2">"-g"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="s2">"${file}"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="s2">"-o"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="s2">"${fileDirname}/${fileBasenameNoExtension}"</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="p">],</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"options"</span><span class="p">:</span><span class="err">¬†</span><span class="p">{</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"cwd"</span><span class="p">:</span><span class="err">¬†</span><span class="s2">"${workspaceFolder}"</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="p">},</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"problemMatcher"</span><span class="p">:</span><span class="err">¬†</span><span class="p">{</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"owner"</span><span class="p">:</span><span class="err">¬†</span><span class="s2">"cpp"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"fileLocation"</span><span class="p">:</span><span class="err">¬†</span><span class="p">[</span><span class="s2">"relative"</span><span class="p">,</span><span class="err">¬†</span><span class="s2">"${workspaceFolder}"</span><span class="p">],</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"pattern"</span><span class="p">:</span><span class="err">¬†</span><span class="p">{</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"regexp"</span><span class="p">:</span><span class="err">¬†</span><span class="s2">"^(.*):(</span><span class="se">\\</span><span class="s2">d+):(</span><span class="se">\\</span><span class="s2">d+):</span><span class="se">\\</span><span class="s2">s+(warning|error):</span><span class="se">\\</span><span class="s2">s+(.*)$"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"file"</span><span class="p">:</span><span class="err">¬†</span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"line"</span><span class="p">:</span><span class="err">¬†</span><span class="mi">2</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"column"</span><span class="p">:</span><span class="err">¬†</span><span class="mi">3</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"severity"</span><span class="p">:</span><span class="err">¬†</span><span class="mi">4</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"message"</span><span class="p">:</span><span class="err">¬†</span><span class="mi">5</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="p">}</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="p">},</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"group"</span><span class="p">:</span><span class="err">¬†</span><span class="p">{</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"kind"</span><span class="p">:</span><span class="err">¬†</span><span class="s2">"build"</span><span class="p">,</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="nl">"isDefault"</span><span class="p">:</span><span class="err">¬†</span><span class="kc">true</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†¬†¬†</span><span class="p">}</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†¬†¬†</span><span class="p">}</span><span class="w">
    </span><span class="err">¬†¬†¬†¬†</span><span class="p">]</span><span class="w">
    </span><span class="err">¬†¬†</span><span class="p">}</span><span class="w">
    
</span></code></pre></div></div> <h4 id="actually-building">Actually Building!</h4> <p>Now we can try to run the build task again:</p> <div class="row mt-1"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/vscode_4_build_task_run-480.webp 480w,/assets/img/vscode_4_build_task_run-800.webp 800w,/assets/img/vscode_4_build_task_run-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/vscode_4_build_task_run.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <caption class="caption"> Build task results </caption> <p>We get a terminal at the bottom reporting that the build task was run successfully.</p> <p>###Just regularly compiling</p> <p>If you wanted to skip the ‚Äúbuild task‚Äù setup step and just jump to compiling via the terminal yourself, you can use clang like you would use gcc/g++: <code class="language-plaintext highlighter-rouge">clang++ vscode_test.cpp -o vscode_test</code></p> <h3 id="running-the-code">Running the code</h3> <p>Depending on how you specify your tasks in tasks.json you can determine where the compiled code will go. In this example it stays in the same workspace directory, so we can run <code class="language-plaintext highlighter-rouge">./vscode_test</code> directly.</p> <div class="row mt-1"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/vscode_5_terminal_done-480.webp 480w,/assets/img/vscode_5_terminal_done-800.webp 800w,/assets/img/vscode_5_terminal_done-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/vscode_5_terminal_done.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <caption class="caption"> Successful build </caption> <p>There you go!</p>]]></content><author><name></name></author><category term="debugging"/><category term="formatting"/><category term="VSCode"/><category term="C++"/><summary type="html"><![CDATA[Some common debug issues found teaching C++]]></summary></entry></feed>